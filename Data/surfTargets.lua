---@author: m1l4
---@summary: A dictionary, containing all pokemon that are able to surf (HM03)
---@attention: Autogenerated using following as source: https://bulbapedia.bulbagarden.net/wiki/Surf_(move)
---so there might be variations to PRO's implementation. Those have to be adressed on the flow.
---@comment: copied from my own project and reduced
---@param dictKey: the pkm index of the pkm to be tested for surf ability
---@type dictKey: integer
---@return: true, if pkm has the ability to learn surf | false, otherwise
---@type: boolean
local SurfTarget = {
    [7] = true,
    [8] = true,
    [9] = true,
--    [25] = true,  --pikachu - removed since it has to be taught by victor and is only available when pikachu was picked as starter
    [31] = true,
    [34] = true,
    [54] = true,
    [55] = true,
    [60] = true,
    [61] = true,
    [62] = true,
    [72] = true,
    [73] = true,
    [79] = true,
    [80] = true,
    [86] = true,
    [87] = true,
    [90] = true,
    [91] = true,
    [98] = true,
    [99] = true,
    [108] = true,
    [112] = true,
    [115] = true,
    [116] = true,
    [117] = true,
    [118] = true,
    [119] = true,
    [120] = true,
    [121] = true,
    [128] = true,
    [130] = true,
    [131] = true,
    [134] = true,
    [138] = true,
    [139] = true,
    [140] = true,
    [141] = true,
    [143] = true,
    [147] = true,
    [148] = true,
    [149] = true,
    [151] = true,
    [158] = true,
    [159] = true,
    [160] = true,
    [161] = true,
    [162] = true,
    [170] = true,
    [171] = true,
    [183] = true,
    [184] = true,
    [186] = true,
    [194] = true,
    [195] = true,
    [199] = true,
    [211] = true,
    [215] = true,
    [222] = true,
    [223] = true,
    [224] = true,
    [226] = true,
    [230] = true,
    [241] = true,
    [245] = true,
    [248] = true,
    [249] = true,
    [258] = true,
    [259] = true,
    [260] = true,
    [263] = true,
    [264] = true,
    [270] = true,
    [271] = true,
    [272] = true,
    [279] = true,
    [295] = true,
    [296] = true,
    [297] = true,
    [298] = true,
    [306] = true,
    [318] = true,
    [319] = true,
    [320] = true,
    [321] = true,
    [339] = true,
    [340] = true,
    [341] = true,
    [342] = true,
    [349] = true,
    [350] = true,
    [363] = true,
    [364] = true,
    [365] = true,
    [366] = true,
    [367] = true,
    [368] = true,
    [369] = true,
    [370] = true,
    [380] = true,
    [381] = true,
    [382] = true,
    [384] = true,
    [393] = true,
    [394] = true,
    [395] = true,
    [400] = true,
    [409] = true,
    [418] = true,
    [419] = true,
    [422] = true,
    [423] = true,
    [445] = true,
    [446] = true,
    [456] = true,
    [457] = true,
    [458] = true,
    [461] = true,
    [463] = true,
    [464] = true,
    [484] = true,
    [489] = true,
    [490] = true,
    [493] = true,
    [501] = true,
    [502] = true,
    [503] = true,
    [507] = true,
    [508] = true,
    [515] = true,
    [516] = true,
    [531] = true,
    [535] = true,
    [536] = true,
    [537] = true,
    [550] = true,
    [564] = true,
    [565] = true,
    [580] = true,
    [581] = true,
    [592] = true,
    [593] = true,
    [594] = true,
    [612] = true,
    [613] = true,
    [614] = true,
    [618] = true,
    [621] = true,
    [626] = true,
    [635] = true,
    [647] = true,
    [656] = true,
    [657] = true,
    [658] = true,
    [659] = true,
    [660] = true,
    [672] = true,
    [673] = true,
    [674] = true,
    [675] = true,
    [676] = true,
    [684] = true,
    [685] = true,
    [688] = true,
    [689] = true,
    [690] = true,
    [691] = true,
    [692] = true,
    [693] = true,
    [694] = true,
    [695] = true,
    [712] = true,
    [713] = true,
    [728] = true,
    [729] = true,
    [730] = true,
    [746] = true,
    [747] = true,
    [748] = true,
    [751] = true,
    [752] = true,
    [767] = true,
    [768] = true,
    [773] = true,
    [779] = true,
    [780] = true,
    [781] = true,
    [788] = true,
}

--redundant, but keeps a clean interface with other methods
function SurfTarget.canSurf(pkmId)
    return SurfTarget[pkmId]
end

function SurfTarget.first()
    --init pkmId
    return SurfTarget.next(0)
end

--TODO: add to genlib
function SurfTarget.next(pkmId)
    if not pkmId then return fatal("SurfTarget.next(pkmId) expects an integer as input.") end
    for i = pkmId  + 1, #SurfTarget do
        if SurfTarget[i] then
            log("SurfTarget next: "..i.." | input: "..pkmId)
            return i
        end
    end
end

function SurfTarget.getIds()
    local values = {}
    for pkmId, isSurfer in pairs(SurfTarget) do
        if isSurfer then table.insert(values, pkmId) end
    end
    return values
end

--set dict size as highest value
local function size(table) return 788 end
setmetatable(SurfTarget, {__len = size})

--
--log(SurfTarget[781])
--log(SurfTarget[782])
--log(SurfTarget.first())



return SurfTarget